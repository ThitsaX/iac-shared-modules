- name: Add Docker apt key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    state: present

- name: Add docker apt repo
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_lsb.codename}} stable"
    update_cache: yes

- name: Install Docker apt package
  apt:
    pkg: docker-ce
    state: latest
    update_cache: yes

- name: Ensure Docker service is installed and restarted
  service:
    name: docker
    state: restarted
    enabled: yes

- name: Login to Docker Hub
  command: "echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin"
  environment:
    DOCKER_PASSWORD: docker_password
    DOCKER_USERNAME: docker_username

- name: Install GitLab Runner
  get_url:
    url: "https://s3.amazonaws.com/gitlab-runner-downloads/{{ version }}/binaries/gitlab-runner-linux-amd64"
    dest: /usr/local/bin/gitlab-runner
    mode: a+x

- name: Add gitlab-runner user to the docker group
  user:
    name: gitlab-runner
    create_home: yes
    group: docker
    shell: /bin/bash
    state: present

- name: Install required Python Libraries
  pip:
    name: python-gitlab<1.13

- name: Install Gitlab Runner
  command: "gitlab-runner install --user gitlab-runner"
  ignore_errors: true

- name: Download ca from gitlab
  command: "openssl s_client -showcerts {{ server_hostname }}:443 2>/dev/null  < /dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /tmp/{{ server_hostname }}.crt"

- name: Start Gitlab Runner
  command: "gitlab-runner start"

- name: Register runners
  command: "gitlab-runner register \
    --tls-ca-file=/tmp/{{ server_hostname }}.crt
    --non-interactive \
    --url {{ external_url }} \
    --registration-token {{ hostvars['gitlab_server']['gitlab_shared_runner_token'] }} \
    --executor docker \
    --docker-privileged \
    --docker-volumes '/certs/client' \
    --docker-image alpine:latest \
    --description 'Runner {{ item }}' \
    --run-untagged=true \
    --locked='false' \
    --access-level=not_protected"
  loop: [4]

- name: Add cron job to keep the server clean
  copy:
    dest: /etc/cron.weekly/docker-system-prune
    src: docker-system-prune
    group: root
    mode: u=rwx,go=rx
    owner: root
